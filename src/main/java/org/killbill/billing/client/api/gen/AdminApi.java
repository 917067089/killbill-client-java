package org.killbill.billing.client.api.gen;


import org.killbill.billing.client.model.gen.AdminPayment;
import java.util.UUID;


import com.google.common.collect.Multimap;
import com.google.common.base.Preconditions;
import com.google.common.collect.HashMultimap;
import com.google.common.base.MoreObjects;

import org.killbill.billing.client.KillBillClientException;
import org.killbill.billing.client.KillBillHttpClient;
import org.killbill.billing.client.RequestOptions;
import org.killbill.billing.util.api.AuditLevel;


/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
public class AdminApi {

    private final KillBillHttpClient httpClient;

    public AdminApi() {
        this(new KillBillHttpClient());
    }

    public AdminApi(final KillBillHttpClient httpClient) {
        this.httpClient = httpClient;
    }

    /*
    public getQueueEntries(final UUID accountId, final String queueName, final String serviceName, final Boolean withHistory, final String minDate, final String maxDate, final Boolean withInProcessing, final Boolean withBusEvents, final Boolean withNotifications,  final RequestOptions inputOptions) throws KillBillClientException {


        final String uri = "/1.0/kb/admin/queues";

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("accountId", String.valueOf(accountId));
        queryParams.put("queueName", String.valueOf(queueName));
        queryParams.put("serviceName", String.valueOf(serviceName));
        queryParams.put("withHistory", String.valueOf(withHistory));
        queryParams.put("minDate", String.valueOf(minDate));
        queryParams.put("maxDate", String.valueOf(maxDate));
        queryParams.put("withInProcessing", String.valueOf(withInProcessing));
        queryParams.put("withBusEvents", String.valueOf(withBusEvents));
        queryParams.put("withNotifications", String.valueOf(withNotifications));

        final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();

    }
    */

    public void invalidatesCache(final String cacheName,  final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/admin/cache";

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("cacheName", String.valueOf(cacheName));

        final RequestOptions requestOptions = inputOptions.extend()
            .withQueryParams(queryParams)
            .build();

        httpClient.doDelete(uri, requestOptions);
    }

    public void invalidatesCacheByAccount(final UUID accountId,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling invalidatesCacheByAccount");

        final String uri = "/1.0/kb/admin/cache/accounts/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());


        final RequestOptions requestOptions = inputOptions.extend().build();

        httpClient.doDelete(uri, requestOptions);
    }

    public void invalidatesCacheByTenant(final String tenantApiKey,  final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/admin/cache/tenants";

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("tenantApiKey", String.valueOf(tenantApiKey));

        final RequestOptions requestOptions = inputOptions.extend()
            .withQueryParams(queryParams)
            .build();

        httpClient.doDelete(uri, requestOptions);
    }

    public void putInRotation( final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/admin/healthcheck";


        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        final RequestOptions requestOptions = inputOptions.extend()
            .withFollowLocation(followLocation)
            .build();

        httpClient.doPost(uri, null, requestOptions);
    }

    public void putOutOfRotation( final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/admin/healthcheck";


        final RequestOptions requestOptions = inputOptions.extend().build();

        httpClient.doDelete(uri, requestOptions);
    }

    public void triggerInvoiceGenerationForParkedAccounts(final Long offset, final Long limit,  final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/admin/invoices";

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("offset", String.valueOf(offset));
        queryParams.put("limit", String.valueOf(limit));

        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        final RequestOptions requestOptions = inputOptions.extend()
            .withFollowLocation(followLocation)
            .withQueryParams(queryParams)
            .build();

        httpClient.doPost(uri, null, requestOptions);
    }

    public AdminPayment updatePaymentTransactionState(final AdminPayment body, final UUID paymentId, final UUID paymentTransactionId,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling updatePaymentTransactionState");
        Preconditions.checkNotNull(paymentId, "Missing the required parameter 'paymentId' when calling updatePaymentTransactionState");
        Preconditions.checkNotNull(paymentTransactionId, "Missing the required parameter 'paymentTransactionId' when calling updatePaymentTransactionState");

        final String uri = "/1.0/kb/admin/payments/{paymentId}/transactions/{paymentTransactionId}"
          .replaceAll("\\{" + "paymentId" + "\\}", paymentId.toString())
          .replaceAll("\\{" + "paymentTransactionId" + "\\}", paymentTransactionId.toString());


        final RequestOptions requestOptions = inputOptions.extend().build();

        return httpClient.doPut(uri, body, AdminPayment.class, requestOptions);
    }

}
