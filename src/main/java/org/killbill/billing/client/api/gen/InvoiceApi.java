/*
 * Copyright 2014-2018 Groupon, Inc
 * Copyright 2014-2018 The Billing Project, LLC
 *
 * The Billing Project licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


package org.killbill.billing.client.api.gen;


import org.killbill.billing.client.model.gen.CustomField;
import org.killbill.billing.client.model.gen.Invoice;
import org.killbill.billing.client.model.gen.InvoiceDryRun;
import org.killbill.billing.client.model.gen.InvoiceItem;
import org.killbill.billing.client.model.gen.InvoicePayment;
import org.joda.time.LocalDate;
import org.killbill.billing.client.model.gen.Tag;
import java.util.UUID;
import org.killbill.billing.client.model.CustomFields;
import java.util.List;
import org.killbill.billing.client.model.InvoiceItems;
import java.util.Map;
import org.killbill.billing.client.model.Tags;
import org.killbill.billing.util.api.AuditLevel;
import org.killbill.billing.client.model.Invoices;
import org.killbill.billing.client.model.InvoicePayments;

import com.google.common.collect.Multimap;
import com.google.common.base.Preconditions;
import com.google.common.base.MoreObjects;
import com.google.common.collect.LinkedListMultimap;

import org.killbill.billing.client.Converter;
import org.killbill.billing.client.KillBillClientException;
import org.killbill.billing.client.KillBillHttpClient;
import org.killbill.billing.client.RequestOptions;
import org.killbill.billing.client.RequestOptions.RequestOptionsBuilder;


/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
public class InvoiceApi {

    private final KillBillHttpClient httpClient;

    public InvoiceApi() {
        this(new KillBillHttpClient());
    }

    public InvoiceApi(final KillBillHttpClient httpClient) {
        this.httpClient = httpClient;
    }

    public Invoice adjustInvoiceItem(final InvoiceItem body, final UUID invoiceId, final LocalDate requestedDate,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling adjustInvoiceItem");
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling adjustInvoiceItem");

        final String uri = "/1.0/kb/invoices/{invoiceId}"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (requestedDate != null) {
            queryParams.put("requestedDate", String.valueOf(requestedDate));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, Invoice.class, requestOptions);
    }

    public void commitInvoice(final UUID invoiceId,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling commitInvoice");

        final String uri = "/1.0/kb/invoices/{invoiceId}/commitInvoice"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPut(uri, null, requestOptions);
    }

    public CustomFields createCustomFields(final UUID invoiceId, final CustomFields body,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling createCustomFields");
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling createCustomFields");

        final String uri = "/1.0/kb/invoices/{invoiceId}/customFields"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, CustomFields.class, requestOptions);
    }

    public InvoiceItems createExternalCharges(final InvoiceItems body, final UUID accountId, final LocalDate requestedDate, final Map<String, String> pluginProperty, final String paymentExternalKey, final String transactionExternalKey,  final RequestOptions inputOptions) throws KillBillClientException {
        return createExternalCharges(body, accountId, requestedDate, Boolean.valueOf(false), pluginProperty, Boolean.valueOf(false), paymentExternalKey, transactionExternalKey, inputOptions);
    }

    public InvoiceItems createExternalCharges(final InvoiceItems body, final UUID accountId, final LocalDate requestedDate, final Boolean payInvoice, final Map<String, String> pluginProperty, final Boolean autoCommit, final String paymentExternalKey, final String transactionExternalKey,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling createExternalCharges");
        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling createExternalCharges");

        final String uri = "/1.0/kb/invoices/charges/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (requestedDate != null) {
            queryParams.put("requestedDate", String.valueOf(requestedDate));
        }
        if (payInvoice != null) {
            queryParams.put("payInvoice", String.valueOf(payInvoice));
        }
        if (pluginProperty != null) {
            queryParams.putAll("pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }
        if (autoCommit != null) {
            queryParams.put("autoCommit", String.valueOf(autoCommit));
        }
        if (paymentExternalKey != null) {
            queryParams.put("paymentExternalKey", String.valueOf(paymentExternalKey));
        }
        if (transactionExternalKey != null) {
            queryParams.put("transactionExternalKey", String.valueOf(transactionExternalKey));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, InvoiceItems.class, requestOptions);
    }

    public Invoice createFutureInvoice(final UUID accountId, final LocalDate targetDate,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling createFutureInvoice");

        final String uri = "/1.0/kb/invoices";

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (accountId != null) {
            queryParams.put("accountId", String.valueOf(accountId));
        }
        if (targetDate != null) {
            queryParams.put("targetDate", String.valueOf(targetDate));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, null, Invoice.class, requestOptions);
    }

    public InvoicePayment createInstantPayment(final InvoicePayment body, final UUID invoiceId, final Map<String, String> pluginProperty,  final RequestOptions inputOptions) throws KillBillClientException {
        return createInstantPayment(body, invoiceId, Boolean.valueOf(false), pluginProperty, inputOptions);
    }

    public InvoicePayment createInstantPayment(final InvoicePayment body, final UUID invoiceId, final Boolean externalPayment, final Map<String, String> pluginProperty,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling createInstantPayment");
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling createInstantPayment");

        final String uri = "/1.0/kb/invoices/{invoiceId}/payments"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (externalPayment != null) {
            queryParams.put("externalPayment", String.valueOf(externalPayment));
        }
        if (pluginProperty != null) {
            queryParams.putAll("pluginProperty", Converter.convertPluginPropertyMap(pluginProperty));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, InvoicePayment.class, requestOptions);
    }

    public Invoice createMigrationInvoice(final InvoiceItems body, final UUID accountId, final LocalDate targetDate,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling createMigrationInvoice");
        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling createMigrationInvoice");

        final String uri = "/1.0/kb/invoices/migration/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (targetDate != null) {
            queryParams.put("targetDate", String.valueOf(targetDate));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, Invoice.class, requestOptions);
    }

    public Tags createTags(final UUID invoiceId, final List<String> tagDef,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling createTags");

        final String uri = "/1.0/kb/invoices/{invoiceId}/tags"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (tagDef != null) {
            queryParams.putAll("tagDef", tagDef);
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, null, Tags.class, requestOptions);
    }


    public void deleteCBA(final UUID invoiceId, final UUID invoiceItemId, final UUID accountId,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling deleteCBA");
        Preconditions.checkNotNull(invoiceItemId, "Missing the required parameter 'invoiceItemId' when calling deleteCBA");
        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling deleteCBA");

        final String uri = "/1.0/kb/invoices/{invoiceId}/{invoiceItemId}/cba"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString())
          .replaceAll("\\{" + "invoiceItemId" + "\\}", invoiceItemId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (accountId != null) {
            queryParams.put("accountId", String.valueOf(accountId));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doDelete(uri, requestOptions);
    }


    public void deleteCustomFields(final UUID invoiceId, final List<String> customField,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling deleteCustomFields");

        final String uri = "/1.0/kb/invoices/{invoiceId}/customFields"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (customField != null) {
            queryParams.putAll("customField", customField);
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doDelete(uri, requestOptions);
    }


    public void deleteTags(final UUID invoiceId, final List<UUID> tagDef,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling deleteTags");

        final String uri = "/1.0/kb/invoices/{invoiceId}/tags"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (tagDef != null) {
            queryParams.putAll("tagDef", Converter.convertUUIDListToStringList(tagDef));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doDelete(uri, requestOptions);
    }

    public Invoice generateDryRunInvoice(final InvoiceDryRun body, final UUID accountId, final LocalDate targetDate,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling generateDryRunInvoice");
        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling generateDryRunInvoice");

        final String uri = "/1.0/kb/invoices/dryRun";

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (accountId != null) {
            queryParams.put("accountId", String.valueOf(accountId));
        }
        if (targetDate != null) {
            queryParams.put("targetDate", String.valueOf(targetDate));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doPost(uri, body, Invoice.class, requestOptions);
    }

    public String getCatalogTranslation(final String locale,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(locale, "Missing the required parameter 'locale' when calling getCatalogTranslation");

        final String uri = "/1.0/kb/invoices/catalogTranslation/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/plain");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public CustomFields getCustomFields(final UUID invoiceId,  final RequestOptions inputOptions) throws KillBillClientException {
        return getCustomFields(invoiceId, AuditLevel.NONE, inputOptions);
    }

    public CustomFields getCustomFields(final UUID invoiceId, final AuditLevel audit,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getCustomFields");

        final String uri = "/1.0/kb/invoices/{invoiceId}/customFields"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (audit != null) {
            queryParams.put("audit", String.valueOf(audit));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, CustomFields.class, requestOptions);
    }

    public Invoice getInvoice(final UUID invoiceId,  final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoice(invoiceId, Boolean.valueOf(false), Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Invoice getInvoice(final UUID invoiceId, final Boolean withItems, final Boolean withChildrenItems, final AuditLevel audit,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getInvoice");

        final String uri = "/1.0/kb/invoices/{invoiceId}"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (withItems != null) {
            queryParams.put("withItems", String.valueOf(withItems));
        }
        if (withChildrenItems != null) {
            queryParams.put("withChildrenItems", String.valueOf(withChildrenItems));
        }
        if (audit != null) {
            queryParams.put("audit", String.valueOf(audit));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoice.class, requestOptions);
    }

    public String getInvoiceAsHTML(final UUID invoiceId,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getInvoiceAsHTML");

        final String uri = "/1.0/kb/invoices/{invoiceId}/html"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public Invoice getInvoiceByNumber(final Integer invoiceNumber,  final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoiceByNumber(invoiceNumber, Boolean.valueOf(false), Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Invoice getInvoiceByNumber(final Integer invoiceNumber, final Boolean withItems, final Boolean withChildrenItems, final AuditLevel audit,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceNumber, "Missing the required parameter 'invoiceNumber' when calling getInvoiceByNumber");

        final String uri = "/1.0/kb/invoices/{invoiceNumber}"
          .replaceAll("\\{" + "invoiceNumber" + "\\}", invoiceNumber.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (withItems != null) {
            queryParams.put("withItems", String.valueOf(withItems));
        }
        if (withChildrenItems != null) {
            queryParams.put("withChildrenItems", String.valueOf(withChildrenItems));
        }
        if (audit != null) {
            queryParams.put("audit", String.valueOf(audit));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoice.class, requestOptions);
    }

    public String getInvoiceMPTemplate(final String locale,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(locale, "Missing the required parameter 'locale' when calling getInvoiceMPTemplate");

        final String uri = "/1.0/kb/invoices/manualPayTemplate"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public String getInvoiceTemplate( final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/invoices/template";


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public String getInvoiceTranslation(final String locale,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(locale, "Missing the required parameter 'locale' when calling getInvoiceTranslation");

        final String uri = "/1.0/kb/invoices/translation/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/plain");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, String.class, requestOptions);
    }

    public Invoices getInvoices( final RequestOptions inputOptions) throws KillBillClientException {
        return getInvoices(Long.valueOf(0), Long.valueOf(100), Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Invoices getInvoices(final Long offset, final Long limit, final Boolean withItems, final AuditLevel audit,  final RequestOptions inputOptions) throws KillBillClientException {

        final String uri = "/1.0/kb/invoices/pagination";

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (offset != null) {
            queryParams.put("offset", String.valueOf(offset));
        }
        if (limit != null) {
            queryParams.put("limit", String.valueOf(limit));
        }
        if (withItems != null) {
            queryParams.put("withItems", String.valueOf(withItems));
        }
        if (audit != null) {
            queryParams.put("audit", String.valueOf(audit));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoices.class, requestOptions);
    }

    public InvoicePayments getPayments(final UUID invoiceId,  final RequestOptions inputOptions) throws KillBillClientException {
        return getPayments(invoiceId, AuditLevel.NONE, Boolean.valueOf(false), Boolean.valueOf(false), inputOptions);
    }

    public InvoicePayments getPayments(final UUID invoiceId, final AuditLevel audit, final Boolean withPluginInfo, final Boolean withAttempts,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getPayments");

        final String uri = "/1.0/kb/invoices/{invoiceId}/payments"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (audit != null) {
            queryParams.put("audit", String.valueOf(audit));
        }
        if (withPluginInfo != null) {
            queryParams.put("withPluginInfo", String.valueOf(withPluginInfo));
        }
        if (withAttempts != null) {
            queryParams.put("withAttempts", String.valueOf(withAttempts));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, InvoicePayments.class, requestOptions);
    }

    public Tags getTags(final UUID invoiceId,  final RequestOptions inputOptions) throws KillBillClientException {
        return getTags(invoiceId, Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Tags getTags(final UUID invoiceId, final Boolean includedDeleted, final AuditLevel audit,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling getTags");

        final String uri = "/1.0/kb/invoices/{invoiceId}/tags"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (includedDeleted != null) {
            queryParams.put("includedDeleted", String.valueOf(includedDeleted));
        }
        if (audit != null) {
            queryParams.put("audit", String.valueOf(audit));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Tags.class, requestOptions);
    }

    public void modifyCustomFields(final UUID invoiceId, final CustomFields body,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling modifyCustomFields");
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling modifyCustomFields");

        final String uri = "/1.0/kb/invoices/{invoiceId}/customFields"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPut(uri, body, requestOptions);
    }

    public Invoices searchInvoices(final String searchKey,  final RequestOptions inputOptions) throws KillBillClientException {
        return searchInvoices(searchKey, Long.valueOf(0), Long.valueOf(100), Boolean.valueOf(false), AuditLevel.NONE, inputOptions);
    }

    public Invoices searchInvoices(final String searchKey, final Long offset, final Long limit, final Boolean withItems, final AuditLevel audit,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(searchKey, "Missing the required parameter 'searchKey' when calling searchInvoices");

        final String uri = "/1.0/kb/invoices/search/{searchKey}"
          .replaceAll("\\{" + "searchKey" + "\\}", searchKey.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (offset != null) {
            queryParams.put("offset", String.valueOf(offset));
        }
        if (limit != null) {
            queryParams.put("limit", String.valueOf(limit));
        }
        if (withItems != null) {
            queryParams.put("withItems", String.valueOf(withItems));
        }
        if (audit != null) {
            queryParams.put("audit", String.valueOf(audit));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        return httpClient.doGet(uri, Invoices.class, requestOptions);
    }

    public void uploadCatalogTranslation(final String body, final String locale,  final RequestOptions inputOptions) throws KillBillClientException {
        uploadCatalogTranslation(body, locale, Boolean.valueOf(false), inputOptions);
    }

    public void uploadCatalogTranslation(final String body, final String locale, final Boolean deleteIfExists,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling uploadCatalogTranslation");
        Preconditions.checkNotNull(locale, "Missing the required parameter 'locale' when calling uploadCatalogTranslation");

        final String uri = "/1.0/kb/invoices/catalogTranslation/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (deleteIfExists != null) {
            queryParams.put("deleteIfExists", String.valueOf(deleteIfExists));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/plain");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/plain");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPost(uri, body, requestOptions);
    }

    public void uploadInvoiceMPTemplate(final String body,  final RequestOptions inputOptions) throws KillBillClientException {
        uploadInvoiceMPTemplate(body, Boolean.valueOf(false), inputOptions);
    }

    public void uploadInvoiceMPTemplate(final String body, final Boolean deleteIfExists,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling uploadInvoiceMPTemplate");

        final String uri = "/1.0/kb/invoices/manualPayTemplate";

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (deleteIfExists != null) {
            queryParams.put("deleteIfExists", String.valueOf(deleteIfExists));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/html");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPost(uri, body, requestOptions);
    }

    public void uploadInvoiceTemplate(final String body,  final RequestOptions inputOptions) throws KillBillClientException {
        uploadInvoiceTemplate(body, Boolean.valueOf(false), inputOptions);
    }

    public void uploadInvoiceTemplate(final String body, final Boolean deleteIfExists,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling uploadInvoiceTemplate");

        final String uri = "/1.0/kb/invoices/template";

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (deleteIfExists != null) {
            queryParams.put("deleteIfExists", String.valueOf(deleteIfExists));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/html");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/html");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPost(uri, body, requestOptions);
    }

    public void uploadInvoiceTranslation(final String body, final String locale,  final RequestOptions inputOptions) throws KillBillClientException {
        uploadInvoiceTranslation(body, locale, Boolean.valueOf(false), inputOptions);
    }

    public void uploadInvoiceTranslation(final String body, final String locale, final Boolean deleteIfExists,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling uploadInvoiceTranslation");
        Preconditions.checkNotNull(locale, "Missing the required parameter 'locale' when calling uploadInvoiceTranslation");

        final String uri = "/1.0/kb/invoices/translation/{locale}"
          .replaceAll("\\{" + "locale" + "\\}", locale.toString());

        final Multimap<String, String> queryParams = LinkedListMultimap.create(inputOptions.getQueryParams());
        if (deleteIfExists != null) {
            queryParams.put("deleteIfExists", String.valueOf(deleteIfExists));
        }

        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        inputOptionsBuilder.withFollowLocation(followLocation);
        inputOptionsBuilder.withQueryParams(queryParams);
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "text/plain");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "text/plain");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPost(uri, body, requestOptions);
    }

    public void voidInvoice(final UUID invoiceId,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(invoiceId, "Missing the required parameter 'invoiceId' when calling voidInvoice");

        final String uri = "/1.0/kb/invoices/{invoiceId}/voidInvoice"
          .replaceAll("\\{" + "invoiceId" + "\\}", invoiceId.toString());


        final RequestOptionsBuilder inputOptionsBuilder = inputOptions.extend();
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_CONTENT_TYPE, "application/json");
        inputOptionsBuilder.withHeader(KillBillHttpClient.HTTP_HEADER_ACCEPT, "application/json");
        final RequestOptions requestOptions = inputOptionsBuilder.build();

        httpClient.doPut(uri, null, requestOptions);
    }

}
