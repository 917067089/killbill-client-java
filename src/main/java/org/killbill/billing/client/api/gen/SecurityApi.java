package org.killbill.billing.client.api.gen;


import org.killbill.billing.client.model.Permissions;
import org.killbill.billing.client.model.gen.RoleDefinition;
import org.killbill.billing.client.model.gen.Subject;
import org.killbill.billing.client.model.gen.UserRoles;
import java.util.List;


import com.google.common.collect.Multimap;
import com.google.common.base.Preconditions;
import com.google.common.collect.HashMultimap;
import com.google.common.base.MoreObjects;

import org.killbill.billing.client.KillBillClientException;
import org.killbill.billing.client.KillBillHttpClient;
import org.killbill.billing.client.RequestOptions;
import org.killbill.billing.util.api.AuditLevel;


/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
public class SecurityApi {

    private final KillBillHttpClient httpClient;

    public SecurityApi() {
        this(new KillBillHttpClient());
    }

    public SecurityApi(final KillBillHttpClient httpClient) {
        this.httpClient = httpClient;
    }

    public RoleDefinition addRoleDefinition(final RoleDefinition body,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling addRoleDefinition");

        final String uri = "/1.0/kb/security/roles";


        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        final RequestOptions requestOptions = inputOptions.extend()
            .withFollowLocation(followLocation)
            .build();

        return httpClient.doPost(uri, body, RoleDefinition.class, requestOptions);
    }

    public UserRoles addUserRoles(final UserRoles body,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling addUserRoles");

        final String uri = "/1.0/kb/security/users";


        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        final RequestOptions requestOptions = inputOptions.extend()
            .withFollowLocation(followLocation)
            .build();

        return httpClient.doPost(uri, body, UserRoles.class, requestOptions);
    }

    public Permissions getCurrentUserPermissions(final RequestOptions inputOptions) throws KillBillClientException {


        final String uri = "/1.0/kb/security/permissions";


        final RequestOptions requestOptions = inputOptions.extend().build();

        return httpClient.doGet(uri, Permissions.class, requestOptions);
    }

    public Subject getCurrentUserSubject( final RequestOptions inputOptions) throws KillBillClientException {


        final String uri = "/1.0/kb/security/subject";


        final RequestOptions requestOptions = inputOptions.extend().build();

        return httpClient.doGet(uri, Subject.class, requestOptions);
    }

    public UserRoles getUserRoles(final String username,  final RequestOptions inputOptions) throws KillBillClientException {

        Preconditions.checkNotNull(username, "Missing the required parameter 'username' when calling getUserRoles");

        final String uri = "/1.0/kb/security/users/{username}/roles"
          .replaceAll("\\{" + "username" + "\\}", username.toString());


        final RequestOptions requestOptions = inputOptions.extend().build();

        return httpClient.doGet(uri, UserRoles.class, requestOptions);

    }

    public void invalidateUser(final String username,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(username, "Missing the required parameter 'username' when calling invalidateUser");

        final String uri = "/1.0/kb/security/users/{username}"
          .replaceAll("\\{" + "username" + "\\}", username.toString());


        final RequestOptions requestOptions = inputOptions.extend().build();

        httpClient.doDelete(uri, requestOptions);
    }

    public RoleDefinition updateRoleDefinition(final RoleDefinition body,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling updateRoleDefinition");

        final String uri = "/1.0/kb/security/roles";


        final RequestOptions requestOptions = inputOptions.extend().build();

        return httpClient.doPut(uri, body, RoleDefinition.class, requestOptions);
    }

    public UserRoles updateUserPassword(final UserRoles body, final String username,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling updateUserPassword");
        Preconditions.checkNotNull(username, "Missing the required parameter 'username' when calling updateUserPassword");

        final String uri = "/1.0/kb/security/users/{username}/password"
          .replaceAll("\\{" + "username" + "\\}", username.toString());


        final RequestOptions requestOptions = inputOptions.extend().build();

        return httpClient.doPut(uri, body, UserRoles.class, requestOptions);
    }

    public UserRoles updateUserRoles(final UserRoles body, final String username,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling updateUserRoles");
        Preconditions.checkNotNull(username, "Missing the required parameter 'username' when calling updateUserRoles");

        final String uri = "/1.0/kb/security/users/{username}/roles"
          .replaceAll("\\{" + "username" + "\\}", username.toString());


        final RequestOptions requestOptions = inputOptions.extend().build();

        return httpClient.doPut(uri, body, UserRoles.class, requestOptions);
    }

}
