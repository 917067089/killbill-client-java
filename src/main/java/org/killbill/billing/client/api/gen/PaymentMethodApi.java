package org.killbill.billing.client.api.gen;


import org.killbill.billing.client.model.gen.CustomField;
import org.killbill.billing.client.model.gen.PaymentMethod;
import java.util.UUID;
import org.killbill.billing.client.model.CustomFields;
import java.util.List;
import org.killbill.billing.util.api.AuditLevel;
import org.killbill.billing.client.model.PaymentMethods;


import com.google.common.collect.Multimap;
import com.google.common.base.Preconditions;
import com.google.common.collect.HashMultimap;
import com.google.common.base.MoreObjects;

import org.killbill.billing.client.KillBillClientException;
import org.killbill.billing.client.KillBillHttpClient;
import org.killbill.billing.client.RequestOptions;
import org.killbill.billing.util.api.AuditLevel;


/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
public class PaymentMethodApi {

    private final KillBillHttpClient httpClient;

    public PaymentMethodApi() {
        this(new KillBillHttpClient());
    }

    public PaymentMethodApi(final KillBillHttpClient httpClient) {
        this.httpClient = httpClient;
    }

    public CustomFields createCustomFields(final UUID paymentMethodId, final CustomFields body,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(paymentMethodId, "Missing the required parameter 'paymentMethodId' when calling createCustomFields");
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling createCustomFields");

        final String uri = "/1.0/kb/paymentMethods/{paymentMethodId}/customFields"
          .replaceAll("\\{" + "paymentMethodId" + "\\}", paymentMethodId.toString());


        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        final RequestOptions requestOptions = inputOptions.extend()
            .withFollowLocation(followLocation)
            .build();

        return httpClient.doPost(uri, body, CustomFields.class, requestOptions);
    }

    public void deleteCustomFields(final UUID paymentMethodId, final String customFieldList,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(paymentMethodId, "Missing the required parameter 'paymentMethodId' when calling deleteCustomFields");

        final String uri = "/1.0/kb/paymentMethods/{paymentMethodId}/customFields"
          .replaceAll("\\{" + "paymentMethodId" + "\\}", paymentMethodId.toString());

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("customFieldList", String.valueOf(customFieldList));

        final RequestOptions requestOptions = inputOptions.extend()
            .withQueryParams(queryParams)
            .build();

        httpClient.doDelete(uri, requestOptions);
    }

    public void deletePaymentMethod(final UUID paymentMethodId, final Boolean deleteDefaultPmWithAutoPayOff, final Boolean forceDefaultPmDeletion, final List<String> pluginProperty,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(paymentMethodId, "Missing the required parameter 'paymentMethodId' when calling deletePaymentMethod");

        final String uri = "/1.0/kb/paymentMethods/{paymentMethodId}"
          .replaceAll("\\{" + "paymentMethodId" + "\\}", paymentMethodId.toString());

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("deleteDefaultPmWithAutoPayOff", String.valueOf(deleteDefaultPmWithAutoPayOff));
        queryParams.put("forceDefaultPmDeletion", String.valueOf(forceDefaultPmDeletion));
        queryParams.put("pluginProperty", String.valueOf(pluginProperty));

        final RequestOptions requestOptions = inputOptions.extend()
            .withQueryParams(queryParams)
            .build();

        httpClient.doDelete(uri, requestOptions);
    }

    public CustomFields getCustomFields(final UUID paymentMethodId, final AuditLevel auditLevel,  final RequestOptions inputOptions) throws KillBillClientException {

        Preconditions.checkNotNull(paymentMethodId, "Missing the required parameter 'paymentMethodId' when calling getCustomFields");

        final String uri = "/1.0/kb/paymentMethods/{paymentMethodId}/customFields"
          .replaceAll("\\{" + "paymentMethodId" + "\\}", paymentMethodId.toString());

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("auditLevel", String.valueOf(auditLevel));

        final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();

        return httpClient.doGet(uri, CustomFields.class, requestOptions);
    }

    public PaymentMethod getPaymentMethod(final UUID paymentMethodId, final List<String> pluginProperty, final Boolean includedDeleted, final AuditLevel auditLevel, final Boolean withPluginInfo,  final RequestOptions inputOptions) throws KillBillClientException {

        Preconditions.checkNotNull(paymentMethodId, "Missing the required parameter 'paymentMethodId' when calling getPaymentMethod");

        final String uri = "/1.0/kb/paymentMethods/{paymentMethodId}"
          .replaceAll("\\{" + "paymentMethodId" + "\\}", paymentMethodId.toString());

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("pluginProperty", String.valueOf(pluginProperty));
        queryParams.put("includedDeleted", String.valueOf(includedDeleted));
        queryParams.put("auditLevel", String.valueOf(auditLevel));
        queryParams.put("withPluginInfo", String.valueOf(withPluginInfo));

        final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();

        return httpClient.doGet(uri, PaymentMethod.class, requestOptions);
    }

    public PaymentMethod getPaymentMethodByKey(final String externalKey, final List<String> pluginProperty, final Boolean includedDeleted, final AuditLevel auditLevel, final Boolean withPluginInfo,  final RequestOptions inputOptions) throws KillBillClientException {

        Preconditions.checkNotNull(externalKey, "Missing the required parameter 'externalKey' when calling getPaymentMethodByKey");

        final String uri = "/1.0/kb/paymentMethods";

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("externalKey", String.valueOf(externalKey));
        queryParams.put("pluginProperty", String.valueOf(pluginProperty));
        queryParams.put("includedDeleted", String.valueOf(includedDeleted));
        queryParams.put("auditLevel", String.valueOf(auditLevel));
        queryParams.put("withPluginInfo", String.valueOf(withPluginInfo));

        final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();

        return httpClient.doGet(uri, PaymentMethod.class, requestOptions);
    }

    public PaymentMethods getPaymentMethods(final Long offset, final Long limit, final String pluginName, final List<String> pluginProperty, final AuditLevel auditLevel, final Boolean withPluginInfo,  final RequestOptions inputOptions) throws KillBillClientException {


        final String uri = "/1.0/kb/paymentMethods/pagination";

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("offset", String.valueOf(offset));
        queryParams.put("limit", String.valueOf(limit));
        queryParams.put("pluginName", String.valueOf(pluginName));
        queryParams.put("pluginProperty", String.valueOf(pluginProperty));
        queryParams.put("auditLevel", String.valueOf(auditLevel));
        queryParams.put("withPluginInfo", String.valueOf(withPluginInfo));

        final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();

        return httpClient.doGet(uri, PaymentMethods.class, requestOptions);
    }

    public CustomFields modifyCustomFields(final UUID paymentMethodId, final CustomFields body,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(paymentMethodId, "Missing the required parameter 'paymentMethodId' when calling modifyCustomFields");
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling modifyCustomFields");

        final String uri = "/1.0/kb/paymentMethods/{paymentMethodId}/customFields"
          .replaceAll("\\{" + "paymentMethodId" + "\\}", paymentMethodId.toString());


        final RequestOptions requestOptions = inputOptions.extend().build();

        return httpClient.doPut(uri, body, CustomFields.class, requestOptions);
    }

    public PaymentMethods searchPaymentMethods(final String searchKey, final Long offset, final Long limit, final String pluginName, final List<String> pluginProperty, final AuditLevel auditLevel, final Boolean withPluginInfo,  final RequestOptions inputOptions) throws KillBillClientException {

        Preconditions.checkNotNull(searchKey, "Missing the required parameter 'searchKey' when calling searchPaymentMethods");

        final String uri = "/1.0/kb/paymentMethods/search/{searchKey}"
          .replaceAll("\\{" + "searchKey" + "\\}", searchKey.toString());

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("offset", String.valueOf(offset));
        queryParams.put("limit", String.valueOf(limit));
        queryParams.put("pluginName", String.valueOf(pluginName));
        queryParams.put("pluginProperty", String.valueOf(pluginProperty));
        queryParams.put("auditLevel", String.valueOf(auditLevel));
        queryParams.put("withPluginInfo", String.valueOf(withPluginInfo));

        final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();

        return httpClient.doGet(uri, PaymentMethods.class, requestOptions);
    }

}
