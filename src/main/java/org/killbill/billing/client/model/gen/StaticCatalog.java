/*
 * Copyright 2014-2018 Groupon, Inc
 * Copyright 2014-2018 The Billing Project, LLC
 *
 * The Billing Project licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


package org.killbill.billing.client.model.gen;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
import org.killbill.billing.catalog.api.Currency;
import org.killbill.billing.client.model.gen.Listing;
import org.killbill.billing.client.model.gen.Plan;
import org.killbill.billing.client.model.gen.Product;
import org.killbill.billing.client.model.gen.Unit;

/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
import org.killbill.billing.client.model.KillBillObject;

public class StaticCatalog {

    private String catalogName = null;

    private List<Product> currentProducts = null;

    private List<Currency> currentSupportedCurrencies = null;

    private List<Unit> currentUnits = null;

    private List<Plan> currentPlans = null;

    private DateTime effectiveDate = null;

    private List<Listing> availableBasePlanListings = null;


    public StaticCatalog() {
    }

    public StaticCatalog(final String catalogName,
                     final List<Product> currentProducts,
                     final List<Currency> currentSupportedCurrencies,
                     final List<Unit> currentUnits,
                     final List<Plan> currentPlans,
                     final DateTime effectiveDate,
                     final List<Listing> availableBasePlanListings) {
        this.catalogName = catalogName;
        this.currentProducts = currentProducts;
        this.currentSupportedCurrencies = currentSupportedCurrencies;
        this.currentUnits = currentUnits;
        this.currentPlans = currentPlans;
        this.effectiveDate = effectiveDate;
        this.availableBasePlanListings = availableBasePlanListings;

    }


    public StaticCatalog setCatalogName(final String catalogName) {
        this.catalogName = catalogName;
        return this;
    }

    public String getCatalogName() {
        return catalogName;
    }

    public StaticCatalog setCurrentProducts(final List<Product> currentProducts) {
        this.currentProducts = currentProducts;
        return this;
    }

    public StaticCatalog addCurrentProductsItem(final Product currentProductsItem) {
        if (this.currentProducts == null) {
            this.currentProducts = new ArrayList<Product>();
        }
        this.currentProducts.add(currentProductsItem);
        return this;
    }

    public List<Product> getCurrentProducts() {
        return currentProducts;
    }

    public StaticCatalog setCurrentSupportedCurrencies(final List<Currency> currentSupportedCurrencies) {
        this.currentSupportedCurrencies = currentSupportedCurrencies;
        return this;
    }

    public StaticCatalog addCurrentSupportedCurrenciesItem(final Currency currentSupportedCurrenciesItem) {
        if (this.currentSupportedCurrencies == null) {
            this.currentSupportedCurrencies = new ArrayList<Currency>();
        }
        this.currentSupportedCurrencies.add(currentSupportedCurrenciesItem);
        return this;
    }

    public List<Currency> getCurrentSupportedCurrencies() {
        return currentSupportedCurrencies;
    }

    public StaticCatalog setCurrentUnits(final List<Unit> currentUnits) {
        this.currentUnits = currentUnits;
        return this;
    }

    public StaticCatalog addCurrentUnitsItem(final Unit currentUnitsItem) {
        if (this.currentUnits == null) {
            this.currentUnits = new ArrayList<Unit>();
        }
        this.currentUnits.add(currentUnitsItem);
        return this;
    }

    public List<Unit> getCurrentUnits() {
        return currentUnits;
    }

    public StaticCatalog setCurrentPlans(final List<Plan> currentPlans) {
        this.currentPlans = currentPlans;
        return this;
    }

    public StaticCatalog addCurrentPlansItem(final Plan currentPlansItem) {
        if (this.currentPlans == null) {
            this.currentPlans = new ArrayList<Plan>();
        }
        this.currentPlans.add(currentPlansItem);
        return this;
    }

    public List<Plan> getCurrentPlans() {
        return currentPlans;
    }

    public StaticCatalog setEffectiveDate(final DateTime effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }

    public DateTime getEffectiveDate() {
        return effectiveDate;
    }

    public StaticCatalog setAvailableBasePlanListings(final List<Listing> availableBasePlanListings) {
        this.availableBasePlanListings = availableBasePlanListings;
        return this;
    }

    public StaticCatalog addAvailableBasePlanListingsItem(final Listing availableBasePlanListingsItem) {
        if (this.availableBasePlanListings == null) {
            this.availableBasePlanListings = new ArrayList<Listing>();
        }
        this.availableBasePlanListings.add(availableBasePlanListingsItem);
        return this;
    }

    public List<Listing> getAvailableBasePlanListings() {
        return availableBasePlanListings;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StaticCatalog staticCatalog = (StaticCatalog) o;
        return Objects.equals(this.catalogName, staticCatalog.catalogName) &&
        Objects.equals(this.currentProducts, staticCatalog.currentProducts) &&
        Objects.equals(this.currentSupportedCurrencies, staticCatalog.currentSupportedCurrencies) &&
        Objects.equals(this.currentUnits, staticCatalog.currentUnits) &&
        Objects.equals(this.currentPlans, staticCatalog.currentPlans) &&
        Objects.equals(this.effectiveDate, staticCatalog.effectiveDate) &&
        Objects.equals(this.availableBasePlanListings, staticCatalog.availableBasePlanListings);

    }

    @Override
    public int hashCode() {
        return Objects.hash(catalogName,
                            currentProducts,
                            currentSupportedCurrencies,
                            currentUnits,
                            currentPlans,
                            effectiveDate,
                            availableBasePlanListings);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class StaticCatalog {\n");
        
        sb.append("    catalogName: ").append(toIndentedString(catalogName)).append("\n");
        sb.append("    currentProducts: ").append(toIndentedString(currentProducts)).append("\n");
        sb.append("    currentSupportedCurrencies: ").append(toIndentedString(currentSupportedCurrencies)).append("\n");
        sb.append("    currentUnits: ").append(toIndentedString(currentUnits)).append("\n");
        sb.append("    currentPlans: ").append(toIndentedString(currentPlans)).append("\n");
        sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
        sb.append("    availableBasePlanListings: ").append(toIndentedString(availableBasePlanListings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

