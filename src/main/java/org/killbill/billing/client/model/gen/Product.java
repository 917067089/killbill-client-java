/*
 * Copyright 2014-2018 Groupon, Inc
 * Copyright 2014-2018 The Billing Project, LLC
 *
 * The Billing Project licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


package org.killbill.billing.client.model.gen;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import org.killbill.billing.catalog.api.ProductCategory;
import org.killbill.billing.client.model.gen.Limit;
import org.killbill.billing.client.model.gen.Product;

/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
import org.killbill.billing.client.model.KillBillObject;

public class Product extends KillBillObject {

    private List<Product> available = null;

    private List<Product> included = null;

    private ProductCategory category = null;

    private String catalogName = null;

    private List<Limit> limits = null;

    private String name = null;

    private String prettyName = null;

    public Product available(List<Product> available) {
        this.available = available;
        return this;
    }

    public Product addAvailableItem(Product availableItem) {
        if (this.available == null) {
            this.available = new ArrayList<Product>();
        }
        this.available.add(availableItem);
        return this;
    }

    
    public List<Product> getAvailable() {
        return available;
    }

    public void setAvailable(List<Product> available) {
        this.available = available;
    }

    public Product included(List<Product> included) {
        this.included = included;
        return this;
    }

    public Product addIncludedItem(Product includedItem) {
        if (this.included == null) {
            this.included = new ArrayList<Product>();
        }
        this.included.add(includedItem);
        return this;
    }

    
    public List<Product> getIncluded() {
        return included;
    }

    public void setIncluded(List<Product> included) {
        this.included = included;
    }

    public Product category(ProductCategory category) {
        this.category = category;
        return this;
    }

    
    public ProductCategory getCategory() {
        return category;
    }

    public void setCategory(ProductCategory category) {
        this.category = category;
    }

    public Product catalogName(String catalogName) {
        this.catalogName = catalogName;
        return this;
    }

    
    public String getCatalogName() {
        return catalogName;
    }

    public void setCatalogName(String catalogName) {
        this.catalogName = catalogName;
    }

    public Product limits(List<Limit> limits) {
        this.limits = limits;
        return this;
    }

    public Product addLimitsItem(Limit limitsItem) {
        if (this.limits == null) {
            this.limits = new ArrayList<Limit>();
        }
        this.limits.add(limitsItem);
        return this;
    }

    
    public List<Limit> getLimits() {
        return limits;
    }

    public void setLimits(List<Limit> limits) {
        this.limits = limits;
    }

    public Product name(String name) {
        this.name = name;
        return this;
    }

    
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Product prettyName(String prettyName) {
        this.prettyName = prettyName;
        return this;
    }

    
    public String getPrettyName() {
        return prettyName;
    }

    public void setPrettyName(String prettyName) {
        this.prettyName = prettyName;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Product product = (Product) o;
        return Objects.equals(this.available, product.available) &&
        Objects.equals(this.included, product.included) &&
        Objects.equals(this.category, product.category) &&
        Objects.equals(this.catalogName, product.catalogName) &&
        Objects.equals(this.limits, product.limits) &&
        Objects.equals(this.name, product.name) &&
        Objects.equals(this.prettyName, product.prettyName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(available, included, category, catalogName, limits, name, prettyName);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Product {\n");
        
        sb.append("    available: ").append(toIndentedString(available)).append("\n");
        sb.append("    included: ").append(toIndentedString(included)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    catalogName: ").append(toIndentedString(catalogName)).append("\n");
        sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    prettyName: ").append(toIndentedString(prettyName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

