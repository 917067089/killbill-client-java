/*
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.killbill.billing.client.model.gen;

import java.util.Objects;
import java.util.Arrays;
import java.util.List;
import org.killbill.billing.client.model.gen.NodeCommandProperty;

import java.util.ArrayList;

/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
import org.killbill.billing.client.model.KillBillObject;

public class NodeCommand extends KillBillObject {

    private Boolean systemCommandType = false;

    private String nodeCommandType = null;

    private List<NodeCommandProperty> nodeCommandProperties = null;

    public NodeCommand systemCommandType(Boolean systemCommandType) {
        this.systemCommandType = systemCommandType;
        return this;
    }

    
    public Boolean isSystemCommandType() {
        return systemCommandType;
    }

    public void setSystemCommandType(Boolean systemCommandType) {
        this.systemCommandType = systemCommandType;
    }

    public NodeCommand nodeCommandType(String nodeCommandType) {
        this.nodeCommandType = nodeCommandType;
        return this;
    }

    
    public String getNodeCommandType() {
        return nodeCommandType;
    }

    public void setNodeCommandType(String nodeCommandType) {
        this.nodeCommandType = nodeCommandType;
    }

    public NodeCommand nodeCommandProperties(List<NodeCommandProperty> nodeCommandProperties) {
        this.nodeCommandProperties = nodeCommandProperties;
        return this;
    }

    public NodeCommand addNodeCommandPropertiesItem(NodeCommandProperty nodeCommandPropertiesItem) {
        if (this.nodeCommandProperties == null) {
            this.nodeCommandProperties = new ArrayList<NodeCommandProperty>();
        }
        this.nodeCommandProperties.add(nodeCommandPropertiesItem);
        return this;
    }

    
    public List<NodeCommandProperty> getNodeCommandProperties() {
        return nodeCommandProperties;
    }

    public void setNodeCommandProperties(List<NodeCommandProperty> nodeCommandProperties) {
        this.nodeCommandProperties = nodeCommandProperties;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NodeCommand nodeCommand = (NodeCommand) o;
        return Objects.equals(this.systemCommandType, nodeCommand.systemCommandType) &&
        Objects.equals(this.nodeCommandType, nodeCommand.nodeCommandType) &&
        Objects.equals(this.nodeCommandProperties, nodeCommand.nodeCommandProperties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(systemCommandType, nodeCommandType, nodeCommandProperties);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NodeCommand {\n");
        
        sb.append("    systemCommandType: ").append(toIndentedString(systemCommandType)).append("\n");
        sb.append("    nodeCommandType: ").append(toIndentedString(nodeCommandType)).append("\n");
        sb.append("    nodeCommandProperties: ").append(toIndentedString(nodeCommandProperties)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

