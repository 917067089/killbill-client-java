package org.killbill.billing.client.gen.api;


import org.killbill.billing.client.gen.model.Account;


import com.google.common.collect.Multimap;
import com.google.common.base.Preconditions;
import com.google.common.collect.HashMultimap;
import com.google.common.base.MoreObjects;

import org.killbill.billing.client.KillBillClientException;
import org.killbill.billing.client.KillBillHttpClient;
import org.killbill.billing.client.RequestOptions;
import org.killbill.billing.util.api.AuditLevel;

/**
 *           DO NOT EDIT !!!
 *
 * This code has been generated by the Kill Bill swagger generator.
 *  @See https://github.com/killbill/killbill-swagger-coden
 */
public class AccountApi {

    private final KillBillHttpClient httpClient;

    public AccountApi() {
        this(new KillBillHttpClient());
    }

    public AccountApi(final KillBillHttpClient httpClient) {
        this.httpClient = httpClient;
    }

    public void closeAccount(final String accountId, final Boolean cancelAllSubscriptions, final Boolean writeOffUnpaidInvoices, final Boolean itemAdjustUnpaidInvoices,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling closeAccount");

        final String uri = "/1.0/kb/accounts/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("cancelAllSubscriptions", String.valueOf(cancelAllSubscriptions));
        queryParams.put("writeOffUnpaidInvoices", String.valueOf(writeOffUnpaidInvoices));
        queryParams.put("itemAdjustUnpaidInvoices", String.valueOf(itemAdjustUnpaidInvoices));

        final RequestOptions requestOptions = inputOptions.extend()
            .withQueryParams(queryParams)
            .build();

        httpClient.doDelete(uri, requestOptions);
    }

    public Account createAccount(final Account body,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling createAccount");

        final String uri = "/1.0/kb/accounts";


        final Boolean followLocation = MoreObjects.firstNonNull(inputOptions.getFollowLocation(), Boolean.TRUE);
        final RequestOptions requestOptions = inputOptions.extend()
            .withFollowLocation(followLocation)
            .build();

        return httpClient.doPost(uri, body, Account.class, requestOptions);
    }

    public Account getAccount(final String accountId, final Boolean accountWithBalance, final Boolean accountWithBalanceAndCBA, final AuditLevel auditLevel,  final RequestOptions inputOptions) throws KillBillClientException {

        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling getAccount");

        final String uri = "/1.0/kb/accounts/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("accountWithBalance", String.valueOf(accountWithBalance));
        queryParams.put("accountWithBalanceAndCBA", String.valueOf(accountWithBalanceAndCBA));
        queryParams.put("auditLevel", String.valueOf(auditLevel));

        final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();

        return httpClient.doGet(uri, Account.class, requestOptions);
    }

    public Account getAccountByKey(final String externalKey, final Boolean accountWithBalance, final Boolean accountWithBalanceAndCBA, final AuditLevel auditLevel,  final RequestOptions inputOptions) throws KillBillClientException {

        Preconditions.checkNotNull(externalKey, "Missing the required parameter 'externalKey' when calling getAccountByKey");

        final String uri = "/1.0/kb/accounts";

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("externalKey", String.valueOf(externalKey));
        queryParams.put("accountWithBalance", String.valueOf(accountWithBalance));
        queryParams.put("accountWithBalanceAndCBA", String.valueOf(accountWithBalanceAndCBA));
        queryParams.put("auditLevel", String.valueOf(auditLevel));

        final RequestOptions requestOptions = inputOptions.extend().withQueryParams(queryParams).build();

        return httpClient.doGet(uri, Account.class, requestOptions);
    }

    public Account updateAccount(final Account body, final String accountId, final Boolean treatNullAsReset,  final RequestOptions inputOptions) throws KillBillClientException {
        Preconditions.checkNotNull(body, "Missing the required parameter 'body' when calling updateAccount");
        Preconditions.checkNotNull(accountId, "Missing the required parameter 'accountId' when calling updateAccount");

        final String uri = "/1.0/kb/accounts/{accountId}"
          .replaceAll("\\{" + "accountId" + "\\}", accountId.toString());

        final Multimap<String, String> queryParams = HashMultimap.<String, String>create(inputOptions.getQueryParams());
        queryParams.put("treatNullAsReset", String.valueOf(treatNullAsReset));

        final RequestOptions requestOptions = inputOptions.extend()
            .withQueryParams(queryParams)
            .build();

        return httpClient.doPut(uri, body, Account.class, requestOptions);
    }

}
